import stack as s 

def test_Node():
    node = s.Node(1)
    assert (node.get_data() == 1)
    print("[TESTING] Success on get_data()")
    assert (node.get_next() == None)
    print("[TESTING] Success on get_next() on None")
    node.set_next(s.Node(3))
    print("[TESTING] Set next node to be non-None")
    assert (node.get_next() != None)
    print("[TESTING] Success on get_next() on non-None")
    assert (node.get_next().get_data() == 3)
    print("[TESTING] Success on set_next() verified by data")
    print("[TESTING] test_Node() concluded successfully")

def test_Stack():
    empty_stack = s.Stack() 
    stack = s.Stack(s.Node(1))
    assert (empty_stack.peek() == None)
    print("[TESTING] Success on empty_stack.peek()")
    assert (empty_stack.get_count() == 0)
    print("[TESTING] Success on empty_stack.get_count() with zero elements")
    assert (stack.peek() == 1)
    print("[TESTING] Success on stack.peek(), stack.__init__() with one entry")
    assert (stack.get_count() == 1)
    print("[TESTING] Success on stack.get_count(), stack.__init__() with one element")
    stack.push(2)
    stack.push(3)
    assert (stack.get_count() == 3)
    print("[TESTING] Success on stack.get_count() with more than one element")
    assert (stack.peek() == 3)
    print("[TESTING] Success on stack.peek() with more than one element")
    assert (stack.pop() == 3)
    print("[TESTING] Success on stack.pop() with more than one element")
    assert (stack.get_count() == 2)
    print("[TESTING] Success on stack.get_count() after pop")
    assert (stack.pop() == 2)
    assert (stack.pop() == 1)
    assert (stack.get_count() == 0)
    print("[TESTING] Success on stack.get_count() after emptying stack")
    stack.push(1)
    assert (stack.peek() == 1)
    assert (stack.get_count() == 1)
    print("[TESTING] Success on stack.peek() after repopulating from empty stack")
    print("[TESTING] test_Stack() concluded successfully")


test_Node()
test_Stack()
print("[TESTING] Unit tests concluded successfully")